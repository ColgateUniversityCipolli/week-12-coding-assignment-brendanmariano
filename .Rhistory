help(t.test)
help(subset)
help(slice)
help(subset)
help(index)
dat
library(tidyverse)
library(VGAM)
# 1.a
(t.val = qt(.95, df = 19))
# 1.b
(t.val2 = qt(.95, df = 29))
# 1.c
val3 = qt(.95,999)
type1.cnt = 0
for(i in 1:1000){
dat = rlaplace(n = 30, scale = 4)
# p.20 = t.test(subset(dat, select = ), alternative = "greater")
p.30 = t.test(dat, alternative = "greater")
if(t.val > quartile(dat, probs = .95)){
type1.cnt = type1.cnt + 1
}
}
help(quartile)
library(tidyverse)
library(VGAM)
# 1.a
(t.val = qt(.95, df = 19))
# 1.b
(t.val2 = qt(.95, df = 29))
# 1.c
val3 = qt(.95,999)
type1.cnt = 0
for(i in 1:1000){
dat = rlaplace(n = 30, scale = 4)
# p.20 = t.test(subset(dat, select = ), alternative = "greater")
p.30 = t.test(dat, alternative = "greater")
if(t.val > quantile(dat, probs = .95)){
type1.cnt = type1.cnt + 1
}
}
library(tidyverse)
library(VGAM)
# 1.a
(t.val = qt(.95, df = 19))
# 1.b
(t.val2 = qt(.95, df = 29))
# 1.c
val3 = qt(.95,999)
type1.cnt = 0
for(i in 1:10){
dat = rlaplace(n = 30, scale = 4)
# p.20 = t.test(subset(dat, select = ), alternative = "greater")
p.30 = t.test(dat, alternative = "greater")
if(t.val > quantile(dat, probs = .95)){
type1.cnt = type1.cnt + 1
}
}
